<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator>
  <link href="https://old.tacosdedatos.com/tag/pytest/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://old.tacosdedatos.com/" rel="alternate" type="text/html" />
  <updated>2021-08-01T20:46:16+00:00</updated>
  <id>https://old.tacosdedatos.com/tag/pytest/feed.xml</id>

  
  
  

  
    <title type="html">üåÆ tacos de datos | Aprende visualizaci√≥n de datos en espa√±ol. | </title>
  

  
    <subtitle>Tu sitio para aprender de visualizaci√≥n y ciencia de datos en espa√±ol. Consejos, recursos y mejores pr√°cticas para tus proyectos de tecnolog√≠a, periodismo de datos y an√°lisis estad√≠sticos.</subtitle>
  

  

  
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Probando nuestro c√≥digo con pytest</title>
      <link href="https://old.tacosdedatos.com/pruebas-unitarias-pytest" rel="alternate" type="text/html" title="Probando nuestro c√≥digo con pytest" />
      <published>2020-05-12T10:00:00+00:00</published>
      <updated>2020-05-12T10:00:00+00:00</updated>
      <id>https://old.tacosdedatos.com/pruebas-unitarias-pytest</id>
      <content type="html" xml:base="https://old.tacosdedatos.com/pruebas-unitarias-pytest">&lt;h4 id=&quot;aviso&quot;&gt;Aviso&lt;/h4&gt;
&lt;p&gt;A lo largo de este post estar√© probando las funciones del c√≥digo que escrib√≠ para el post sobre la &lt;a href=&quot;https://tacosdedatos.com/generacion-automatica-datasets&quot;&gt;generaci√≥n autom√°tica de datasets&lt;/a&gt;; sin embargo no es necesario que leas ese post primero, pero seguramente te ayudar√° a ponerle m√°s contexto al c√≥digo que aqu√≠ se presenta.&lt;/p&gt;

&lt;h2 id=&quot;qu√©-es-pytest&quot;&gt;¬øQu√© es &lt;em&gt;pytest&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;pytest&lt;/em&gt; es un &lt;em&gt;framework&lt;/em&gt; para Python que ofrece la recolecci√≥n autom√°tica de los &lt;em&gt;tests&lt;/em&gt;, aserciones simples, soporte para &lt;em&gt;fixtures&lt;/em&gt;, &lt;em&gt;debugeo&lt;/em&gt; y mucho m√°s‚Ä¶ no te preocupes si algunas de estas palabras no te hacen mucho sentido; intentar√© aclararlos m√°s adelante a lo largo de este post.&lt;/p&gt;

&lt;p&gt;Por cierto, &lt;em&gt;pytest&lt;/em&gt; no es el √∫nico &lt;em&gt;framework&lt;/em&gt; disponible; tambi√©n est√° &lt;em&gt;nose&lt;/em&gt;, &lt;em&gt;doctest&lt;/em&gt;, &lt;em&gt;testify&lt;/em&gt;‚Ä¶ pero &lt;em&gt;pytest&lt;/em&gt; es el que uso y de el que conozco m√°s.&lt;/p&gt;

&lt;p&gt;Para obtener &lt;em&gt;pytest&lt;/em&gt; lo puedes descargar desde PyPI con tu gestor de paquetes de elecci√≥n:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;escribiendo-nuestros-tests&quot;&gt;Escribiendo nuestros &lt;em&gt;tests&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Para escribir las pruebas es necesario escribir funciones que comiencen con el prefijo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_&lt;/code&gt;. Es necesario que las llamemos as√≠ ya que al momento de ejecutar &lt;em&gt;pytest&lt;/em&gt; debemos especificar un directorio ra√≠z, a partir de este directorio &lt;em&gt;pytest&lt;/em&gt; leer√° todos los archivos buscando funciones que comiencen con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_&lt;/code&gt;. Por ejemplo, si miras el &lt;a href=&quot;https://github.com/fferegrino/medium-collector&quot;&gt;repositorio de &lt;em&gt;medium-collector&lt;/em&gt;&lt;/a&gt;, ver√°s que todos los &lt;em&gt;tests&lt;/em&gt; est√°n contenidos dentro de un folder apropiadamente llamado &lt;em&gt;tests&lt;/em&gt;. Para ejecutar todas las pruebas, lo que tenemos que hacer es ejecutar &lt;em&gt;pytest&lt;/em&gt; con esta carpeta como argumento:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pytest tests/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;parametrizando-nuestras-pruebas&quot;&gt;Parametrizando nuestras pruebas&lt;/h2&gt;
&lt;p&gt;Comencemos por escribir un test sencillo: una sola entrada, una sola salida. y sin llamadas a servicios externos. Me refiero a una funci√≥n que toma una cadena codificada (como esta: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=?UTF-8?B?VGhlcmXigJlz?= more to the story&lt;/code&gt;) y regresa otra cadena (como esta: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;There‚Äôs more to the story&lt;/code&gt;), en este caso estoy hablando sobre la funci√≥n &lt;a href=&quot;https://github.com/fferegrino/medium-collector/blob/v0.0.0/medium_collector/download/parser.py#L12&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_subject&lt;/code&gt; method&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject_parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subjects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subject_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;utf8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subject_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject_parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para escribir una prueba unitaria es tan ‚Äúsimple‚Äù como hacer esto:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;There's more to the story&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=?UTF-8?B?VGhlcmXigJlz?= more to the story&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sin embargo, esta funcion necesita ser probada con el caso en donde toda la cadena est√° codificada, o el caso en donde no lo est√°. Para cubrir estos casos tendr√≠amos que escribir m√©todos como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_get_subject_all_encoded&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_get_subject_none_encoded&lt;/code&gt;, pero eso ser√≠a una duplicaci√≥n absurda de c√≥digo, para solucionar este problema de &lt;strong&gt;probar el mismo c√≥digo con m√∫ltiples valores de entrada&lt;/strong&gt; podemos hacer uso de la &lt;strong&gt;parametrizaci√≥n&lt;/strong&gt; usando el decorador &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@pytest.mark.parametrize&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pytest&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parametrize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;input_subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Input 1
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;=?UTF-8?B?V2hlbiBhICQxMDAsMDAwIFNhbGFyeSBJc27igJl0IEVub3VnaCB8IEFkYW0gUGFyc29ucyBpbiBNYWtpbmcgb2YgYSBNaWxsaW8=?= =?UTF-8?B?bmFpcmU=?=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;When a $100,000 Salary Isn‚Äôt Enough | Adam Parsons in Making of a Millionaire&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Input 2
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;=?UTF-8?B?VGhlcmXigJlz?= more to the story&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;s&quot;&gt;&quot;There‚Äôs more to the story&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Input 3
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;7 Things Rich People Advise But Never Do | David O. in The Startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;7 Things Rich People Advise But Never Do | David O. in The Startup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El c√≥digo anterior le indica a &lt;em&gt;pytest&lt;/em&gt; que ejecute la prueba &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_get_subject&lt;/code&gt; tres veces, cada una reemplazando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input_subject&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;expected&lt;/code&gt; con sus valores correspondientes especificados en el segundo argumento de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parametrize&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fixtures&quot;&gt;Fixtures&lt;/h2&gt;
&lt;p&gt;En algunas ocasiones tal vez tengamos &lt;strong&gt;pruebas que comiencen desde cierto estado&lt;/strong&gt;, este estado puede ser tener datos en una base de datos, tener archivos en alguna carpeta, o tal vez simplemente tener el objeto correcto como entrada a la funci√≥n; es ah√≠ donde las &lt;em&gt;fixtures&lt;/em&gt; son √∫tiles.&lt;/p&gt;

&lt;p&gt;Por ejemplo, en el repositorio de &lt;em&gt;medium-colletor&lt;/em&gt; hay una funci√≥n llamada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_mail&lt;/code&gt; que, como el nombre lo sugiere, podemos usar para extraer informaci√≥n de un objeto de la clase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email.message.Message&lt;/code&gt;. Esta es una versi√≥n simplificada de la implementaci√≥n del m√©todo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Message-ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;To&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;From&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para probar esta funci√≥n necesitamos un objeto de la clase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message&lt;/code&gt;, pero en realidad no quiero tener que conectarme a nuestro servidor de email cada vez que ejecutemos la prueba; este es el escenario perfecto para usar una &lt;em&gt;fixture&lt;/em&gt;. Para definir una, tenemos que isar algo como el siguiente c√≥digo:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dummy_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIMEMultipart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;alternative&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Link&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;From&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you@this.com&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;To&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;me@that.com&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Message-ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strftime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%a, %d %b %Y %H:%M:%S +0000 (UTC)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hi!&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lo primero que hay que notar es que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@pytest.fixture&lt;/code&gt; es usado como decorador de‚Ä¶ ¬ø¬°una funci√≥n!? S√≠, as√≠ es, una &lt;em&gt;fixture&lt;/em&gt; no es nada m√°s que una funci√≥n cuyo valor de retorno debe ser el valor que queremos que esa &lt;em&gt;fixture&lt;/em&gt; tenga. En este caso, el valor de nuestra &lt;em&gt;fixture&lt;/em&gt; ser√° un objeto de la clase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIMEMultipart&lt;/code&gt; que hereda de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message&lt;/code&gt; que es justo lo que queremos.&lt;/p&gt;

&lt;p&gt;Ahora, para usar nuestra &lt;em&gt;fixture&lt;/em&gt; llamada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dummy_mail&lt;/code&gt; en nuestra prueba es suficiente con pasarla como argumento en nuestra funci√≥n de prueba:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected_mail_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ad841b37bd4b9b5403b575432f67f5ed2d68ed40&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a4747a50dad63531704f5ab32509bb0c60b7350f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;from&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you@this.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;subject&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Link&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_mail_info&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;Hi!&amp;lt;br&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cuando ejecutamos &lt;em&gt;pytest&lt;/em&gt;, este tratar√° de resolverlas antes de que se ejecute cualquier prueba que las use, y una ves que estas est√©n listas, los m√©todos de prueba reciben los valores especificados en cada m√©todo asociado. Este mecanismo permite algunos otros usos interesantes de los que hablar√© m√°s adelante.&lt;/p&gt;

&lt;h3 id=&quot;una-caracter√≠stica-extra-de-las-fixtures&quot;&gt;Una caracter√≠stica extra de las &lt;em&gt;fixtures&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Las &lt;em&gt;fixtures&lt;/em&gt; de &lt;em&gt;pytest&lt;/em&gt; son geniales, y otro de sus usos es cuando queremos reutilizar el mismo fragmento de c√≥digo en dos o m√°s funciones de prueba. Imagina que necesitamos usar un objeto de la clase &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Message&lt;/code&gt; para dos pruebas. Podr√≠amos haber declarado una variable global, digamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MESSAGE = MIMEMultipart(&quot;alternative&quot;)&lt;/code&gt; y despu√©s usarla en nuestros m√©todos as√≠:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_parse_mail_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_parse_mail_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pero en este caso, ambos tests estar√≠an usando la misma variable, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MESSAGE&lt;/code&gt; lo que significa que cualquier cambio hecho por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_parse_mail_1&lt;/code&gt; afectar√≠a el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MESSAGE&lt;/code&gt; que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_parse_mail_2&lt;/code&gt; recibe, esto rompe el prop√≥sito de las pruebas unitarias, ya que nuestros &lt;em&gt;tests&lt;/em&gt; no estar√≠an aislados. Sin embargo, cuando usamos &lt;em&gt;fixtures&lt;/em&gt;, cada funci√≥n de prueba recibe una copia nueva de lo que sea que regrese nuestra funci√≥n marcada con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@pytest.fixture&lt;/code&gt;, haciendo f√°cil y sencillo usarlas una y otra vez.&lt;/p&gt;

&lt;h2 id=&quot;patching&quot;&gt;Patching&lt;/h2&gt;
&lt;p&gt;Sin lugar a dudas, algunas partes de nuestro c√≥digo depender√°n de librer√≠as de terceros o a servicios externos que no queremos ejecutar o contactar cuando ejecutamos nuestras pruebas. Ya sea porque la librer√≠a que estamos usando consume muchos recursos o es un sistema productivo que no deber√≠a ser tocado durante las pruebas, aqu√≠ es cuando el &lt;strong&gt;patching&lt;/strong&gt; brilla por su utilidad; este nos ayuda a &lt;strong&gt;reemplazar el comportamiento (o valores de retorno) de una llamada a una funci√≥n&lt;/strong&gt; con lo que nosotros dispongamos.&lt;/p&gt;

&lt;p&gt;Imagina que la funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_html&lt;/code&gt; contiene c√≥digo que es muy &lt;em&gt;‚Äúcostoso‚Äù&lt;/em&gt; ejecutar, y no lo queremos que este c√≥digo se ejecute cada vez que llamamos al test &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_parse_mail&lt;/code&gt;, entonces podemos &lt;em&gt;parcharlo&lt;/em&gt; (tengo que decir que el &lt;em&gt;patching&lt;/em&gt; no es una funcionalidad de &lt;em&gt;pytest&lt;/em&gt; si no que viene con Python por default).&lt;/p&gt;

&lt;p&gt;Hay dos formas de &lt;em&gt;‚Äúparchar‚Äù&lt;/em&gt; nuestro c√≥digo: una de ellas es haciendo uso de la instrucci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;, pasando el nombre completo de la funci√≥n que queremos &lt;em&gt;‚Äúparchar‚Äù&lt;/em&gt;. Un test que aplica un &lt;em&gt;patch&lt;/em&gt; a la funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_html&lt;/code&gt; dentro de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parse_email&lt;/code&gt; se ver√≠a as√≠:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest.mock&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expected_mail_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ad841b37bd4b9b5403b575432f67f5ed2d68ed40&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# ...
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;medium_collector.download.parser.get_html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy_mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;patched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_called_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mail_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected_mail_info&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decoded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En el fragmento anterior estamos &lt;em&gt;‚Äúparchando‚Äù&lt;/em&gt; la funci√≥n y estableciendo el valor de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt; como su valor de retorno con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return_value&lt;/code&gt;. Esto significa que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Hello&quot;&lt;/code&gt; ser√° regresado cada vez que la funci√≥n es ejecutada. Ahora que la funci√≥n original no es realmente ejecutada, es importante que nos cercioremos que nuestro c√≥digo est√° llamando a esta funci√≥n, para esto podemos utilizar el m√©todo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert_called_once&lt;/code&gt; para verificar que lo hemos llamado.&lt;/p&gt;

&lt;h3 id=&quot;los-peligros-del-patching&quot;&gt;Los peligros del &lt;em&gt;patching&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El &lt;em&gt;parcheo&lt;/em&gt; podr√≠a parecer una soluci√≥n f√°cil para evitar conectarse con servicios externos o llamadas a funciones costosas. Pero debes tener en cuenta que cuando &lt;em&gt;parchamos&lt;/em&gt; algo, estamos asumiendo muchas cosas sobre el c√≥digo que estamos &lt;em&gt;parchando&lt;/em&gt;, estas asunciones son:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sabemos el comportamiento esperado del c√≥digo que estamos &lt;em&gt;parchando&lt;/em&gt;, es decir, sabemos sus valores de retorno y bajo que circunstancias falla.&lt;/li&gt;
  &lt;li&gt;Puedes, con completa seguridad, regresar un objeto que se comporte como el valor que originalmente ser√≠a retornado por la funci√≥n real.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando aplicas un parche a una funci√≥n, toma en cuenta que esta puede retornar un valor ‚Äúcomplejo‚Äù que sea dif√≠cil de reproducir, y que &lt;em&gt;‚Äúparcharlo‚Äù&lt;/em&gt; mal resultar√≠a en tu c√≥digo siendo probado ante un escenario que nunca ocurrir√° en la vida real. Para evitar esto, tal vez tengas que examinar muy a detalla cuales son los valores de retorno de lo que est√°s &lt;em&gt;‚Äúparchando‚Äù&lt;/em&gt; con el fin de hacerlo correctamente.&lt;/p&gt;

&lt;p&gt;Otro problema muy com√∫n con el &lt;em&gt;patching&lt;/em&gt; es que en nos podemos dejar llevar y terminar &lt;em&gt;‚Äúparchando‚Äù&lt;/em&gt; todo‚Ä¶ lo que, a final de cuentas nos pone en la situaci√≥n de estar probando nuestro c√≥digo en escenarios poco realistas. Si en alg√∫n momento te encuentras haciendo esto, es mejor que te detengas y reconsideres si las pruebas unitarias son la mejor soluci√≥n para probar tu c√≥digo‚Ä¶ tal vez las pruebas de integraci√≥n sean una mejor soluci√≥n para tu problema de &lt;em&gt;testing&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fixtures-avanzadas&quot;&gt;&lt;em&gt;Fixtures&lt;/em&gt; avanzadas&lt;/h2&gt;
&lt;p&gt;Como lo mencion√© anteriormente, la forma en la que &lt;em&gt;pytest&lt;/em&gt; resuelve las &lt;em&gt;fixtures&lt;/em&gt; puede ser usada para darle a nuestro c√≥digo m√°s flexibilidad. En el repositorio de &lt;em&gt;medium-collector&lt;/em&gt; hay una funci√≥n que carga algunos archivos a un &lt;em&gt;bucket&lt;/em&gt; de S3 usando la librer√≠a &lt;em&gt;boto&lt;/em&gt;, esta es la funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload_files&lt;/code&gt;, que se ve m√°s o menos as√≠:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upload_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;s3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_access_key_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ACCESS_KEY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aws_secret_access_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SECRET_KEY&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eu-west-2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upload_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Claro que no quero estar conect√°ndome a AWS cada vez que ejecuto las pruebas; aqu√≠ es donde la librer√≠a &lt;em&gt;moto&lt;/em&gt; aparece para rescatarme. En palabras de sus creadores: &lt;em&gt;‚ÄúMoto es una librer√≠a que permite que tus tests f√°cilmente finjan comunicarse con servicios de AWS‚Äù&lt;/em&gt;. La forma en la que ellos sugieren usarla es a trav√©s de un manejador de contexto:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_my_model_save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'us-east-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Para probar nuestra funci√≥n debemos cumplir dos condiciones antes de llamar a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload_files&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Imitar S3; no queremos estar conect√°ndonos a AWS en nuestras pruebas unitarias,&lt;/li&gt;
  &lt;li&gt;Tener un &lt;em&gt;bucket&lt;/em&gt; que ya exista; nuestro c√≥digo asume que uno ya existe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para lograr estas dos cosas con un &lt;em&gt;fixture&lt;/em&gt; podemos hacer algo como esto:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;my_special_bucket&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pytest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fixture&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mock_storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextmanager&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eu-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create_bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esta &lt;em&gt;fixture&lt;/em&gt; es, en realidad, una funci√≥n (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inner&lt;/code&gt;) que gracias al decorador &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contextmanager&lt;/code&gt; podemos llamar con la instrucci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;. En t√©rminos de la implementaci√≥n puedes ver que estamos usando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock_s3&lt;/code&gt; como lo recomiendan los desarrolladores de &lt;em&gt;moto&lt;/em&gt;, dentro de este contexto creamos un cliente de &lt;em&gt;boto3&lt;/em&gt;, luego, dependiendo de un par√°metro pasado a nuestra funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inner&lt;/code&gt; decidimos si creamos o no la &lt;em&gt;bucket&lt;/em&gt;; por √∫ltimo, y como este se trata de un manejador de contexto usamos la instrucci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt; que le indicar√° a &lt;em&gt;pytest&lt;/em&gt; que nuestra &lt;em&gt;fixture&lt;/em&gt; est√° lista para ser usada.&lt;/p&gt;

&lt;p&gt;Ah, no s√© si te diste cuenta, pero &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mock_storage&lt;/code&gt; toma como argumento otra &lt;em&gt;fixture&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bucket&lt;/code&gt; en este caso). Esa es otra de las excelentes caracter√≠sticas de &lt;em&gt;pytest&lt;/em&gt;: permite crear ciertas dependencias entre nuestras &lt;em&gt;fixtures&lt;/em&gt;, y esta es resuleta antes de que se ejecuten nuestras pruebas.&lt;/p&gt;

&lt;p&gt;Ahora s√≠, estamos listos a probar nuestra funci√≥n &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload_files&lt;/code&gt; con esta funci√≥n:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_upload_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;upload_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;eu-east-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Contents&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;practica&quot;&gt;¬°Practica!&lt;/h2&gt;
&lt;p&gt;Me hubiera encantado preparar un notebook o cualquier otra forma de entorno interactivo que pudieras usar para jugar y experimentar un poco con los &lt;em&gt;tests&lt;/em&gt;, pero creo que para este tema, es mejor que te ensucies las manos con un poco de c√≥digo verdadero. Te invito a que descargues el c√≥digo de la aplicaci√≥n &lt;a href=&quot;https://github.com/fferegrino/medium-collector&quot;&gt;&lt;em&gt;medium-collector&lt;/em&gt; repo&lt;/a&gt; y ejecutes los test por ti mism@.&lt;/p&gt;

&lt;h2 id=&quot;m√°s-all√°-de-las-pruebas-unitarias&quot;&gt;M√°s all√° de las pruebas unitarias&lt;/h2&gt;
&lt;p&gt;A pesar de que &lt;em&gt;pytest&lt;/em&gt; es fabuloso para realizar pruebas unitarias, nada nos detiene de usarlo para otras pruebas, a√∫n m√°s m√°s complejas; hablo de pruebas de integraci√≥n o tal vez hasta de &lt;em&gt;end-to-end&lt;/em&gt;. Con herramientas como &lt;em&gt;Docker&lt;/em&gt;, &lt;em&gt;localstack&lt;/em&gt; y otras m√°s, es posible crear un poderos &lt;em&gt;framework&lt;/em&gt; de pruebas para todos tus proyectos de Python. En un post futuro voy a hablar de c√≥mo es que se puede utilizar todo el poder de estas herramientas para crear un test de &lt;em&gt;end-to-end&lt;/em&gt;, as√≠ que aseg√∫rate de seguir el blog y de seguirme en Twitter en &lt;a href=&quot;https://twitter.com/io_exception&quot;&gt;@io_exception&lt;/a&gt;.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Antonio Feregrino Bola√±os</name>
        
        
      </author>

      

      
        <category term="blog" />
      
        <category term="python" />
      
        <category term="pytest" />
      

      
        <summary type="html">Aviso A lo largo de este post estar√© probando las funciones del c√≥digo que escrib√≠ para el post sobre la generaci√≥n autom√°tica de datasets; sin embargo no es necesario que leas ese post primero, pero seguramente te ayudar√° a ponerle m√°s contexto al c√≥digo que aqu√≠ se presenta.</summary>
      

      
      
    </entry>
  
</feed>
